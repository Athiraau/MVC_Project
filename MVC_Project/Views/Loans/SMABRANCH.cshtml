
@{
    ViewData["Title"] = "SMABRANCH";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    @*<meta http-equiv="refresh" content="8" />*@

    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">

    <link rel="stylesheet" href="~/css/index.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.4/xlsx.full.min.js"></script>

    <style>
        .pagecontiner {
            background-color: transparent;
        }

        .dcontainer1 {
            width: 65%;
            height: auto;
            margin-left: 20%;
            padding: 6%;
            border-radius: 5px;
            background-color: #cfd8dc;
            box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;
            font-size: small;
        }

        h5 {
            text-align: center;
        }

        .form-group {
            margin-bottom: 10px;
        }

        label {
            display: block;
            font-size: small;
        }

        input[type="date"],
        select {
            width: 100%;
            padding: 4px;
            border: 1px solid #ADC;
            border-radius: 5px;
        }



        table {
            width: 100%;
            border-collapse: collapse;
            font-size: initial;
        }

        .img1 {
            display: none;
            cursor: pointer;
        }

        th,
        td {
            border: 1px solid white;
            text-align: left;
            padding: 8px;
            font-size: initial;
        }

        th {
            background-color: #f2f2f2;
            font-size: initial;
        }




        .btn-grad {
            background-image: linear-gradient(to right, #4b6cb7 0%, #182848 51%, #4b6cb7 100%);
            text-transform: uppercase;
            transition: 0.5s;
            padding: 10px;
            background-size: 200% auto;
            color: white;
            border-radius: 10px;
            border: none;
            display: block;
        }


            .btn-grad:hover {
                background-position: right center; /* change the direction of the change here */
                color: #fff;
                text-decoration: none;
            }

        .fs-10 {
            font-size: 10px;
        }
    </style>
</head>
<body>
    <div class="pagecontiner">

        <div>
            <button type="button" id="fetchbb" class="btn btn-dark" onclick="">
                Excel Branch
            </button>

            <button type="button" id="fetchabp" class="btn btn-dark" onclick="">
                Excel Pledge
            </button>
        </div>

        <!-- Table -->
        <div class="mt-5" id="dcontainer2">
            <table class="table  table-striped table-hover">
                <thead class="table table-secondary">
                    <tr>
                        <th class="table-secondary text-center" style="background-color:#898AA6" colspan="20">
                            MANAPPURAM FINANCE LIMITED
                        </th>
                    </tr>
                    <tr>
                        <th colspan="2">
                        </th>
                        <th class="text-center fs-10" colspan="16">
                            BRANCH NAME : A.O.VALAPAD -- BRANCH ID : 0 <span id="FromDateSpan"></span>
                            To <span id="ToDateSpan"></span>
                        </th>

                        <th colspan="2" class="fs-10">
                            <span id="time"
                                  style="font-size:10px; font-weight:bold;"></span>
                        </th>

                    </tr>

                    </tr>
                    <tr>
                        <th colspan="2">
                        </th>
                        <th class="text-center fs-10" colspan="16">
                            BRANCHWISE SMA REPORT  02/Apr/2024<span id="FromDateSpan"></span>
                            To <span id="ToDateSpan"></span>
                        </th>

                        <th colspan="2" class="fs-10">
                            <span id="time"
                                  style="font-size:10px; font-weight:bold;"></span>
                        </th>

                    </tr>

                    <tr>
                        <th class="fs-10">BRANCH ID</th>
                        <th class="fs-10">BRANCH NAME</th>
                        <th class="fs-10">AREA NAME</th>

                        <th class="fs-10">REGION NAME</th>
                        <th class="fs-10">ZONE NAME</th>

                        <th class="fs-10" colspan="2"> TOTAL LOAN </th>
                        <th class="fs-10" colspan="2">NOTDUE LOAN</th>

                        <th class="fs-10" colspan="2">SMA-0</th>
                        <th class="fs-10" colspan="2">SMA-1</th>
                        <th class="fs-10" colspan="2">SMA-2</th>
                        <th class="fs-10" colspan="3">SMA-3</th>
                        <th class="fs-10" colspan="3">NON-NPA</th>

                    </tr>

                    <tr>
                        <th class="fs-10"></th>
                        <th class="fs-10"></th>
                        <th class="fs-10"></th>

                        <th class="fs-10"></th>
                        <th class="fs-10"></th>

                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10">LOAN BALANCE</th>

                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10">LOAN BALANCE</th>

                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10">LOAN BALANCE</th>

                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10">LOAN BALANCE</th>

                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10">LOAN BALANCE</th>

                        <th class="fs-10">LOAN COUNT</th>
                        <th class="fs-10">LOAN BALANCE</th>

                        <th class="fs-10">NON-NPA COUNT</th>
                        <th class="fs-10">NON_NPA BALANCE</th>
                    </tr>

                </thead>
                <tbody id="table-body">
                </tbody>
            </table>
        </div>
    </div>


    <script>
        window.onload = function exampleFunction() {

            window.onload = function exampleFunction() {
                var id = '@ViewData["Areaid"]';


                fetchData(id);


            }
    </script>


    <script>

        document.getElementById('fetchbb').addEventListener('click', function () {
            const dateString1 = '@ViewData["SelectedDate"]';
            const AId = '@ViewData["Areaid"]';
            const fDate = dateString1;

            fetchDataBBR(fDate, AId);
        });


        function fetchDataBBR(fDate, AId) {

            var baselink = '@ViewData["baseurl"]';
            const apiUrl = baselink + 'smareportsapi/api/SMAModule/GetSMAData/SMACLASSRPTBRANCH_BREXCEL/';
            const url = `${apiUrl}${fDate}~${AId}/1`

            // Make fetch request
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    
                    const data1 = JSON.stringify(data);
                    // var data2 = data1.replace(/"''"/g, "");

                    // alert(data1);
                    // let data = await response.content.ReadAsStringAsync();
                    // var data2 = data1.replace(/{"MenuResDto":/g, "");
                    // data2 = data2.replace(/}]}/g, "}]");

                    // const data3 = JSON.parse(data2);
                    // console.log(data3);



                    function removeQuotesAndHyphens(str) {
                        return str.replace(/^'([^']+)-([^']+)'$/, '$1_$2'); // Combine quote and hyphen removal with underscore
                    }

                    // Loop and apply regex to each key, also replacing hyphens with underscores
                    const cleanData = data.map(obj => {
                        const newObj = {};
                        Object.keys(obj).forEach(key => {
                            const cleanedKey = removeQuotesAndHyphens(key).replace(/-/g, '_');
                            newObj[cleanedKey] = obj[key];
                        });
                        return newObj;
                    });

                    const dataStr = JSON.stringify(cleanData); // Stringify with indentation
                    console.log(dataStr);


                    // Remove hyphens from top-level object keys (if needed)
                    const dataWithoutHyphens = cleanData.map(obj => {
                        const newObj = {};
                        for (const key in obj) {
                            const cleanedKey = key.replace(/-/g, '_');
                            newObj[cleanedKey] = obj[key];
                        }
                        return newObj;
                    });

                    // Convert to JSON string (optional)
                    const dataString = JSON.stringify(dataWithoutHyphens); // Stringify with indentation

                    const data33 = JSON.parse(dataString);

                    console.log(data33);

                    function removeQuotesRegex(str) {
                        return str.replace(/^'([^']+)'$/, '$1');
                    }

                    // Loop and apply regex to each key
                    const clData = data33.map(obj => {
                        const newObj = {};
                        Object.keys(obj).forEach(key => {
                            newObj[removeQuotesRegex(key)] = obj[key];
                        });
                        return newObj;
                    });
                    const data4 = JSON.stringify(clData);
                    
                    console.log(data4);

                    const dataWithoutHyphenandQoutes = JSON.parse(data4);

                    const extractedData = dataWithoutHyphenandQoutes.map(post => [post.AREANAME, post.BRANCHID, post.BRANCHNAME, post.NODUEBALANCE, post.NODUECOUNT, post.REGIONNAME, post.SMA0BALANCE, post.SMA0COUNT, post.SMA1BALANCE, post.SMA1COUNT, post.SMA2BALANCE, post.SMA2COUNT, post.SMA3BALANCE, post.SMA3COUNT, post.TOTALBALANCE, post.TOTALCOUNT, post.ZONALNAME, post.NON_NPABALANCE, post.NON_NPACOUNT]);

                    const workbook = XLSX.utils.book_new();

                    const worksheet = XLSX.utils.aoa_to_sheet(
                        [['', '', ''], ...extractedData],
                        {
                            '!cols': [
                                { wch: 90 },  // Column A (ID) width set to 10 characters
                                { wch: 90 }, // Column B (Title) width set to 30 characters
                                { wch: 90 }  // Column C (Body) width set to 50 characters
                            ],
                            '!rows': [
                                { hpx: 90 } // Row 1 (header) height set to 20 pixels
                            ]
                        }
                    );

                    XLSX.utils.book_append_sheet(workbook, worksheet, 'Posts');

                    XLSX.writeFile(workbook, 'posts.xlsx');


                    // console.log(data3);
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });

            Fdate = document.getElementById("FromDateSpan");
            // Tdate = document.getElementById("ToDateSpan");

            Fdate.innerHTML = fDate;
            // Tdate.innerHTML = tDate;

        }


        //PLEDGE EXCEL

        document.getElementById('fetchabp').addEventListener('click', function () {
            const dateString1 = '@ViewData["SelectedDate"]';
            const AId = '@ViewData["Areaid"]';
            const fDate = dateString1;

            fetchBPL(fDate, AId);
        });

        function fetchBPL(fDate, AId) {

            var baselink = '@ViewData["baseurl"]';
            const apiUrl = baselink + 'smareportsapi/api/SMAModule/GetSMAData/SMACLASSRPTBRANCH_PLEXCEL/';
            const url = `${apiUrl}${fDate}~${AId}/1`

            // Make fetch request
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    
                    const data1 = JSON.stringify(data);
                    // var data2 = data1.replace(/"''"/g, "");

                    // alert(data1);
                    // let data = await response.content.ReadAsStringAsync();
                    // var data2 = data1.replace(/{"MenuResDto":/g, "");
                    // data2 = data2.replace(/}]}/g, "}]");

                    // const data3 = JSON.parse(data2);
                    // console.log(data3);



                    function removeQuotesAndHyphens(str) {
                        return str.replace(/^'([^']+)-([^']+)'$/, '$1_$2'); // Combine quote and hyphen removal with underscore
                    }

                    // Loop and apply regex to each key, also replacing hyphens with underscores
                    const cleanData = data.map(obj => {
                        const newObj = {};
                        Object.keys(obj).forEach(key => {
                            const cleanedKey = removeQuotesAndHyphens(key).replace(/-/g, '_');
                            newObj[cleanedKey] = obj[key];
                        });
                        return newObj;
                    });

                    const dataStr = JSON.stringify(cleanData); // Stringify with indentation
                    console.log(dataStr);


                    // Remove hyphens from top-level object keys (if needed)
                    const dataWithoutHyphens = cleanData.map(obj => {
                        const newObj = {};
                        for (const key in obj) {
                            const cleanedKey = key.replace(/-/g, '_');
                            newObj[cleanedKey] = obj[key];
                        }
                        return newObj;
                    });

                    // Convert to JSON string (optional)
                    const dataString = JSON.stringify(dataWithoutHyphens); // Stringify with indentation

                    const data33 = JSON.parse(dataString);

                    console.log(data33);

                    function removeQuotesRegex(str) {
                        return str.replace(/^'([^']+)'$/, '$1');
                    }

                    // Loop and apply regex to each key
                    const clData = data33.map(obj => {
                        const newObj = {};
                        Object.keys(obj).forEach(key => {
                            newObj[removeQuotesRegex(key)] = obj[key];
                        });
                        return newObj;
                    });
                    const data4 = JSON.stringify(clData);
                    
                    console.log(data4);

                    const dataWithoutHyphenandQoutes = JSON.parse(data4);

                    const extractedData = dataWithoutHyphenandQoutes.map(post => [post.AREANAME, post.AUCTIONSTATUS, post.BALANCE, post.BRANCHID, post.BRANCHNAME, post.CUSTOMERID, post.DUEDATE, post.INTRESTPAIDSTATUS, post.INTRESTRATE, post.INTRESTRECEIVED, post.NETACCRUED, post.NETWEIGHT, post.PLEDGECATEGORY, post.PLEDGENO, post.PLEDGEVALUE, post.REGIONNAME, post.SCHEME, post.SMASTATUS, post.STATENAME, post.TRANSACTIONDATE, post.ZONALNAME]);

                    const workbook = XLSX.utils.book_new();

                    const worksheet = XLSX.utils.aoa_to_sheet(
                        [['', '', ''], ...extractedData],
                        {
                            '!cols': [
                                { wch: 90 },  // Column A (ID) width set to 10 characters
                                { wch: 90 }, // Column B (Title) width set to 30 characters
                                { wch: 90 }  // Column C (Body) width set to 50 characters
                            ],
                            '!rows': [
                                { hpx: 90 } // Row 1 (header) height set to 20 pixels
                            ]
                        }
                    );

                    XLSX.utils.book_append_sheet(workbook, worksheet, 'Posts');

                    XLSX.writeFile(workbook, 'posts.xlsx');


                    // console.log(data3);
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });

            Fdate = document.getElementById("FromDateSpan");
            // Tdate = document.getElementById("ToDateSpan");

            Fdate.innerHTML = fDate;
            // Tdate.innerHTML = tDate;

        }

    </script>
    <script>
        function cleart() {
            const tableBody = document.getElementById('table-body');
            tableBody.innerHTML = '';
        }
    </script>

    <script>
        function formatDateForAPI(dateString) {
            // Split the date string into year, month, and day components
            const [year, month, day] = dateString.split("-");

            // Pad the month and day with leading zeros if necessary (optional)
            const paddedMonth = month.padStart(2, "0");
            const paddedDay = day.padStart(2, "0");

            // Reassemble the date in the desired format
            return `${paddedDay}-${paddedMonth}-${year}`;
        }


    </script>

    <script>

        // Function to create and populate table with data
        function populateTable(data3) {
            // Get reference to the table body
            const tableBody = document.getElementById('table-body');

            // Clear existing table rows
            tableBody.innerHTML = '';

            // Iterate over the data and create table rows
            data3.forEach(item => {
                // Create a new row
                const row = tableBody.insertRow();

                // Insert cells into the row
                const cell1 = row.insertCell();
                cell1.style.fontSize = "8px";
                cell1.style.color = "blue";
                cell1.style.textDecoration = "underline"; // Add underline
                cell1.style.cursor = "pointer";
                const cell2 = row.insertCell();
                cell2.style.fontSize = "8px";
                const cell3 = row.insertCell();
                cell3.style.fontSize = "8px";
                const cell4 = row.insertCell();
                cell4.style.fontSize = "8px";
                const cell5 = row.insertCell();
                cell5.style.fontSize = "8px";
                const cell6 = row.insertCell();
                cell6.style.fontSize = "8px";
                const cell7 = row.insertCell();
                cell7.style.fontSize = "8px";
                const cell8 = row.insertCell();
                cell8.style.fontSize = "8px";
                const cell9 = row.insertCell();
                cell9.style.fontSize = "8px";
                const cell10 = row.insertCell();
                cell10.style.fontSize = "8px";
                const cell11 = row.insertCell();
                cell11.style.fontSize = "8px";
                const cell12 = row.insertCell();
                cell12.style.fontSize = "8px";
                const cell13 = row.insertCell();
                cell13.style.fontSize = "8px";
                const cell14 = row.insertCell();
                cell14.style.fontSize = "8px";
                const cell15 = row.insertCell();
                cell15.style.fontSize = "8px";
                const cell16 = row.insertCell();
                cell16.style.fontSize = "8px";
                const cell17 = row.insertCell();
                cell17.style.fontSize = "8px";
                const cell18 = row.insertCell();
                cell18.style.fontSize = "8px";
                const cell19 = row.insertCell();
                cell19.style.fontSize = "8px";
               





                // Add more cells if needed

                // Populate cells with data
                // cell1.textContent = item.FZM;
                cell1.innerHTML = `<a onclick="loadpage(${item.COL_BRID})">${item.COL_BRID}</a>`;
                cell2.textContent = item.COL_BRNCH_NM;
                cell3.textContent = item.COL_AREA_NM;
                cell4.textContent = item.COL_REG_NM;
                cell5.textContent = item.COL_ZONE_NM;
                cell6.textContent = item.COL_TOTAL_LN_CNT;
                cell7.textContent = item.COL_TOTAL_LN_BAL;
                cell8.textContent = item.COL_NODUE_LN_CNT;
                cell9.textContent = item.COL_NODUE_LN_BAL;
                cell10.textContent = item.COL_SMA0_LN_CNT;
                cell11.textContent = item.COL_SMA0_LN_BAL;
                cell12.textContent = item.COL_SMA1_LN_CNT;
                cell13.textContent = item.COL_SMA1_LN_BAL;
                cell14.textContent = item.COL_SMA2_LN_CNT;
                cell15.textContent = item.COL_SMA2_LN_BAL;
                cell16.textContent = item.COL_SMA3_LN_CNT;
                cell17.textContent = item.COL_SMA3_LN_BAL;
                cell18.textContent = item.NCOUNT;
                cell19.textContent = item.NBAL;

            });
        }

        function loadpage(id) {

            var root = '@ViewData["root"]';


            var rootFolder = '';
            var baselink = '@ViewData["baseurl"]';


            if (document.location.hostname == 'localhost') {
                rootFolder = '';
            }
            else {
                rootFolder = baselink + root;
            }
            var d = '@ViewData["SelectedDate"]';
            let result = d.concat("~", id);


            window.location.href = rootFolder + "/Loans/SMAPLEDGE?data=" + result;   //
        }

        // Function to fetch data from API
        function fetchData(id) {


            let SelectedDate = '@ViewData["SelectedDate"]';


            var baselink = '@ViewData["baseurl"]';
            const apiUrl = baselink + 'smareportsapi/api/SMAModule/GetSMAData/SMACLASSRPTBRANCH/';
            const url = `${apiUrl}${SelectedDate}~${id}/1`;
            
            // Make fetch request
            fetch(url)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    const data1 = JSON.stringify(data);
                    // alert(data1);
                    // let data = await response.content.ReadAsStringAsync();
                    // var data2 = data1.replace(/{"MenuResDto":/g, "");
                    // data2 = data2.replace(/}]}/g, "}]");
                    // data2 = data2.replace(/""/g, "\"");
                    const data3 = JSON.parse(data1);

                    // console.log(data3);

                    populateTable(data3)
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
        }
    </script>


    <script type="text/javascript">
        function Validate() {
            var from = document.getElementById("fromDate");
            var to = document.getElementById("toDate");
            var dropdown = document.getElementById("dropdown");
            if (dropdown.value == "") {
                //If the "Please Select" option is selected display error.
                alert("Please select an option!");
                return false;
            } else if (from.value == "") {
                alert("please select  Fromdate");
                return false;
            } else if (to.value == "") {
                alert("please select  Todate");
                return false;
            }
            img.style.display = "block";
            return true;
        }
    </script>

    <script>

        function showContainer() {
            
            var dcontainer2 = document.getElementById('dcontainer2');
            dcontainer2.style.display = 'block';
        }

        function unshowContainer() {
            var dcontainer2 = document.getElementById('dcontainer2');
            dcontainer2.style.display = 'none';

            var img2 = document.getElementById("img");
            img2.style.display = "none";

            document.getElementById("fromDate").value = '';
            document.getElementById("toDate").value = '';
            document.getElementById("dropdown").selectedIndex = 0;
        }
    </script>


    <script>
        function updateTime() {
            const date = new Date();
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');
            const seconds = date.getSeconds().toString().padStart(2, '0');

            const currentTime = `${hours}:${minutes}:${seconds}`;

            document.getElementById("time").textContent = currentTime;
        }
        setInterval(updateTime, 1000);
    </script>
    <script>
        window.onload = function exampleFunction() {

            var Areaid = @ViewData["Areaid"];
            fetchData(Areaid);

        }
    </script>
</body>
</html>

